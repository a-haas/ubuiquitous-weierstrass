/*_________________________________________________________

Test functions
log normal adaptive mutation
Selection operator: Tournament
__________________________________________________________*/

\User declarations :
#define SIZE 1000
#define X_MIN -1.
#define X_MAX 1.
#define ITER 15
#define Abs(x) ((x) < 0 ? -(x) : (x))
#define MAX(x,y) ((x)>(y)?(x):(y))
#define MIN(x,y) ((x)<(y)?(x):(y))
#define SIGMA  1.                     /*  mutation parameter */
#define PI 3.141592654

float pMutPerGene=0.02;

\end

\User functions:
//fitness function
#include <math.h>

__device__ __host__ inline float Weierstrass(float *x, int n){ // Weierstrass multimidmensionnel h = 0.1
   float res = 0., val[SIZE], b=2., HolderCoefficient = .99;

   for (int i = 0;i<n; i++) {
	    val[i] = 0.;
    	for (int k=0;k<ITER;k++)
        val[i] += pow(b,-(float)k*HolderCoefficient) * sin(pow(b,(float)k)*x[i]);
	res += Abs(val[i]);
	}
  return (res);
}


float gauss() {
/* Generates a normally distributed random value with variance 1 and 0 mean.
    Algorithm based on "gasdev" from Numerical recipes' pg. 203. */
  static int iset = 0;
  static float gset = 0.0;
  float v1, v2, r, factor;

  if (iset) {
        iset = 0;
        return gset;
        }
  else {
        do {
            v1 = (float)random(0.,1.) * 2.0 - 1.0;
            v2 = (float)random(0.,1.) * 2.0 - 1.0;
            r = v1 * v1 + v2 * v2;
        } while (r > 1.0);
        factor = sqrt (-2.0 * log (r) / r);
        gset = v1 * factor;
        iset = 1;
        return (v2 * factor);
}      }
\end

\GenomeClass::display:
\end

\Before everything else function:
\end

\After everything else function:
\end

\At the beginning of each generation function:
  //cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
/*
	if(EA->params->timeCriterion->getElapsedTime() > last10min){
		last10min += 60;
		ofstream SaveFile("save.csv", ios::app);
		SaveFile << bBest->fitness << endl;
		SaveFile.close();
	}
*/
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\User classes :
GenomeClass {
  float x[SIZE];
  float sigma; // auto-adaptative mutation parameter
}
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  for(int i=0; i<SIZE; i++ ) Genome.x[i] = (float)random(X_MIN,X_MAX);
	Genome.sigma=(float)random(0.,0.9);
\end

\GenomeClass::crossover :
  for (int i=0; i<SIZE; i++) {
    float alpha = (float)random(0.,1.); // barycentric crossover
    child.x[i] = alpha*parent1.x[i] + (1.-alpha)*parent2.x[i];
  }

\end

\GenomeClass::mutator : // Must return the number of mutations
  int NbMut=0;
  float pond = 1./sqrt((float)SIZE);

  for (int i=0; i<SIZE; i++)
    if (tossCoin(pMutPerGene)){
      	NbMut++;
       	Genome.sigma = Genome.sigma * exp(SIGMA*pond*(float)gauss());
       	Genome.sigma = MIN(0.5,Genome.sigma);
       	Genome.sigma = MAX(0.,Genome.sigma);
       	Genome.x[i] += Genome.sigma*(float)gauss();
       	Genome.x[i] = MIN(X_MAX,Genome.x[i]);              // pour eviter les depassements
       	Genome.x[i] = MAX(X_MIN,Genome.x[i]);
    	}
return NbMut;
\end

\GenomeClass::evaluator : // Returns the score
  return Weierstrass(Genome.x, SIZE);
\end

\User Makefile options:
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 35    // NB_GEN
  Time limit: 0       // In seconds, 0 to deactivate
  Population size : 64      //POP_SIZE
  Offspring size : 64 // 40%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 2
  Surviving parents: 100%//percentage or absolute
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong     //Weak or Strong
  Elite: 1
  Print stats: true       //Default: 1
  Generate csv stats file:false
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true       //Default: 0

  Remote island model: true
  IP file: ip.txt       //File containing all the remote island's IP
  Server port : 2929
  Migration probability: 0.04

  Save population: false
  Start from file:false
\end
